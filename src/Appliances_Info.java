/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package iic.appliances_IS;

import static com.sun.xml.internal.ws.model.RuntimeModeler.capitalize;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import javax.swing.JOptionPane;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author nishan
 */
public class Appliances_Info extends javax.swing.JFrame {

    int qualityChoice;
    private ArrayList<AppliancesData> list = new ArrayList();
    private ArrayList<String> labelNames = new ArrayList();
    int[] priceArr = new int[12];
    String[] categ = new String[12];

    /**
     * Creates new form Appliances_Info
     */
    public Appliances_Info() {
        initComponents();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        quality_btnGroup = new javax.swing.ButtonGroup();
        file_chooser = new javax.swing.JFileChooser();
        app_pannel = new javax.swing.JPanel();
        main_title_pannel = new javax.swing.JPanel();
        main_underscores = new javax.swing.JLabel();
        main_title = new javax.swing.JLabel();
        form_pannel = new javax.swing.JPanel();
        id_field = new javax.swing.JTextField();
        price_label = new javax.swing.JLabel();
        category_label = new javax.swing.JLabel();
        model_number_label = new javax.swing.JLabel();
        name_field = new javax.swing.JTextField();
        warranty_label = new javax.swing.JLabel();
        model_number_field = new javax.swing.JTextField();
        price_field = new javax.swing.JTextField();
        id_label = new javax.swing.JLabel();
        name_label = new javax.swing.JLabel();
        quality_label = new javax.swing.JLabel();
        goodRBtn = new javax.swing.JRadioButton();
        betterRBtn = new javax.swing.JRadioButton();
        bestRBtn = new javax.swing.JRadioButton();
        category_combobox = new javax.swing.JComboBox<>();
        warranty_combobox = new javax.swing.JComboBox<>();
        search_pannel = new javax.swing.JPanel();
        search_button = new javax.swing.JButton();
        search_field = new javax.swing.JTextField();
        table_pannel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        inventory_table = new javax.swing.JTable();
        button_pannel = new javax.swing.JPanel();
        clear_button = new javax.swing.JButton();
        exit_button = new javax.swing.JButton();
        add_button = new javax.swing.JButton();
        delete_table_button = new javax.swing.JButton();
        thanks_pannel = new javax.swing.JPanel();
        thanks_underscores = new javax.swing.JLabel();
        thanks_title = new javax.swing.JLabel();
        appliance_available_search_pannel = new javax.swing.JPanel();
        appliance_available_search_combobox = new javax.swing.JComboBox<>();
        appliance_available_search_button = new javax.swing.JButton();
        menubar = new javax.swing.JMenuBar();
        file_Menu = new javax.swing.JMenu();
        open_menu_item = new javax.swing.JMenuItem();
        exit_menu_item = new javax.swing.JMenuItem();
        help_menu = new javax.swing.JMenu();
        about_app_item = new javax.swing.JMenuItem();
        user_manual_item = new javax.swing.JMenuItem();

        file_chooser.setDialogTitle("Open files");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("NABS WareHouse");
        setName("Appliances_Info_Frame"); // NOI18N
        setResizable(false);

        app_pannel.setBackground(new java.awt.Color(73, 75, 100));

        main_title_pannel.setBackground(new java.awt.Color(73, 75, 100));
        main_title_pannel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        main_underscores.setFont(new java.awt.Font("Verdana", 3, 18)); // NOI18N
        main_underscores.setForeground(new java.awt.Color(138, 189, 79));
        main_underscores.setText("   _______________");
        main_title_pannel.add(main_underscores, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, -1, -1));

        main_title.setFont(new java.awt.Font("Verdana", 3, 18)); // NOI18N
        main_title.setForeground(new java.awt.Color(138, 189, 79));
        main_title.setText("'NABS Inventory,");
        main_title_pannel.add(main_title, new org.netbeans.lib.awtextra.AbsoluteConstraints(19, 11, -1, -1));

        form_pannel.setBackground(new java.awt.Color(73, 75, 100));
        form_pannel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(""), "Inventory Form ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Verdana", 3, 12), new java.awt.Color(0, 204, 204))); // NOI18N

        id_field.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                id_fieldKeyTyped(evt);
            }
        });

        price_label.setFont(new java.awt.Font("Verdana", 3, 14)); // NOI18N
        price_label.setForeground(new java.awt.Color(0, 204, 153));
        price_label.setText("Price :");

        category_label.setFont(new java.awt.Font("Verdana", 3, 14)); // NOI18N
        category_label.setForeground(new java.awt.Color(0, 204, 153));
        category_label.setText("Category :");

        model_number_label.setFont(new java.awt.Font("Verdana", 3, 14)); // NOI18N
        model_number_label.setForeground(new java.awt.Color(0, 204, 153));
        model_number_label.setText("Model Number :");

        name_field.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                name_fieldKeyTyped(evt);
            }
        });

        warranty_label.setFont(new java.awt.Font("Verdana", 3, 14)); // NOI18N
        warranty_label.setForeground(new java.awt.Color(0, 204, 153));
        warranty_label.setText("Warranty :");

        price_field.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                price_fieldKeyTyped(evt);
            }
        });

        id_label.setFont(new java.awt.Font("Verdana", 3, 14)); // NOI18N
        id_label.setForeground(new java.awt.Color(0, 204, 153));
        id_label.setText("ID :");

        name_label.setFont(new java.awt.Font("Verdana", 3, 14)); // NOI18N
        name_label.setForeground(new java.awt.Color(0, 204, 153));
        name_label.setText("Name :");

        quality_label.setFont(new java.awt.Font("Verdana", 3, 14)); // NOI18N
        quality_label.setForeground(new java.awt.Color(0, 204, 153));
        quality_label.setText("Quality :");

        quality_btnGroup.add(goodRBtn);
        goodRBtn.setForeground(new java.awt.Color(240, 240, 240));
        goodRBtn.setText("Good");
        goodRBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        goodRBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goodRBtnActionPerformed(evt);
            }
        });

        quality_btnGroup.add(betterRBtn);
        betterRBtn.setForeground(new java.awt.Color(240, 240, 240));
        betterRBtn.setText("Better");
        betterRBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        betterRBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                betterRBtnActionPerformed(evt);
            }
        });

        quality_btnGroup.add(bestRBtn);
        bestRBtn.setForeground(new java.awt.Color(240, 240, 240));
        bestRBtn.setText("Best");
        bestRBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bestRBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bestRBtnActionPerformed(evt);
            }
        });

        category_combobox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select", "TV", "Laptop", "Fan", "AC", "Mobile" }));
        category_combobox.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        warranty_combobox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select", "No Warranty", "One Year", "Two Year", "Three Year", "Four Year", "Five Year" }));
        warranty_combobox.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        javax.swing.GroupLayout form_pannelLayout = new javax.swing.GroupLayout(form_pannel);
        form_pannel.setLayout(form_pannelLayout);
        form_pannelLayout.setHorizontalGroup(
            form_pannelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(form_pannelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(form_pannelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(form_pannelLayout.createSequentialGroup()
                        .addGroup(form_pannelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(quality_label)
                            .addComponent(category_label)
                            .addComponent(name_label)
                            .addComponent(id_label))
                        .addGap(50, 50, 50)
                        .addGroup(form_pannelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(form_pannelLayout.createSequentialGroup()
                                .addComponent(goodRBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(betterRBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(bestRBtn))
                            .addComponent(id_field)
                            .addComponent(name_field)
                            .addComponent(category_combobox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(price_label)
                    .addGroup(form_pannelLayout.createSequentialGroup()
                        .addGroup(form_pannelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(model_number_label)
                            .addComponent(warranty_label))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(form_pannelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(model_number_field)
                            .addComponent(price_field)
                            .addComponent(warranty_combobox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(19, Short.MAX_VALUE))
        );
        form_pannelLayout.setVerticalGroup(
            form_pannelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(form_pannelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(form_pannelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(id_label)
                    .addComponent(id_field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(form_pannelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(name_field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(name_label))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(form_pannelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(form_pannelLayout.createSequentialGroup()
                        .addComponent(category_label)
                        .addGap(11, 11, 11))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, form_pannelLayout.createSequentialGroup()
                        .addComponent(category_combobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addGroup(form_pannelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(quality_label)
                    .addComponent(goodRBtn)
                    .addComponent(betterRBtn)
                    .addComponent(bestRBtn))
                .addGap(18, 18, 18)
                .addGroup(form_pannelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(model_number_field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(model_number_label))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(form_pannelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(price_field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(price_label))
                .addGap(18, 18, 18)
                .addGroup(form_pannelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(warranty_label)
                    .addComponent(warranty_combobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(28, Short.MAX_VALUE))
        );

        search_pannel.setBackground(new java.awt.Color(73, 75, 100));
        search_pannel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Search Items By Price", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Verdana", 3, 12), new java.awt.Color(0, 204, 204))); // NOI18N

        search_button.setBackground(new java.awt.Color(0, 102, 102));
        search_button.setFont(new java.awt.Font("Yu Gothic UI", 1, 14)); // NOI18N
        search_button.setForeground(new java.awt.Color(153, 255, 204));
        search_button.setText("Search Appliance");
        search_button.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        search_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                search_buttonActionPerformed(evt);
            }
        });

        search_field.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                search_fieldKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout search_pannelLayout = new javax.swing.GroupLayout(search_pannel);
        search_pannel.setLayout(search_pannelLayout);
        search_pannelLayout.setHorizontalGroup(
            search_pannelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(search_pannelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(search_field, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(search_button)
                .addContainerGap())
        );
        search_pannelLayout.setVerticalGroup(
            search_pannelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(search_pannelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(search_pannelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(search_field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(search_button))
                .addContainerGap())
        );

        table_pannel.setBackground(new java.awt.Color(73, 75, 100));
        table_pannel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Item List", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Verdana", 3, 12), new java.awt.Color(0, 204, 204))); // NOI18N

        inventory_table.setBackground(new java.awt.Color(102, 102, 102));
        inventory_table.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        inventory_table.setForeground(new java.awt.Color(254, 254, 254));
        inventory_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Name", "Category", "Quality", "Model Number", "Price", "Warranty"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        inventory_table.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        inventory_table.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(inventory_table);
        if (inventory_table.getColumnModel().getColumnCount() > 0) {
            inventory_table.getColumnModel().getColumn(0).setResizable(false);
            inventory_table.getColumnModel().getColumn(1).setResizable(false);
            inventory_table.getColumnModel().getColumn(2).setResizable(false);
            inventory_table.getColumnModel().getColumn(3).setResizable(false);
            inventory_table.getColumnModel().getColumn(4).setResizable(false);
            inventory_table.getColumnModel().getColumn(5).setResizable(false);
            inventory_table.getColumnModel().getColumn(6).setResizable(false);
        }

        javax.swing.GroupLayout table_pannelLayout = new javax.swing.GroupLayout(table_pannel);
        table_pannel.setLayout(table_pannelLayout);
        table_pannelLayout.setHorizontalGroup(
            table_pannelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );
        table_pannelLayout.setVerticalGroup(
            table_pannelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(table_pannelLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 224, Short.MAX_VALUE)
                .addContainerGap())
        );

        button_pannel.setBackground(new java.awt.Color(73, 75, 100));
        button_pannel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Function Buttons", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Verdana", 3, 12), new java.awt.Color(0, 204, 204))); // NOI18N

        clear_button.setBackground(new java.awt.Color(0, 102, 102));
        clear_button.setFont(new java.awt.Font("Yu Gothic UI", 1, 14)); // NOI18N
        clear_button.setForeground(new java.awt.Color(153, 255, 204));
        clear_button.setText("Clear Fields");
        clear_button.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        clear_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clear_buttonActionPerformed(evt);
            }
        });

        exit_button.setBackground(new java.awt.Color(0, 102, 102));
        exit_button.setFont(new java.awt.Font("Yu Gothic UI", 1, 14)); // NOI18N
        exit_button.setForeground(new java.awt.Color(153, 255, 204));
        exit_button.setText("Exit");
        exit_button.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        exit_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exit_buttonActionPerformed(evt);
            }
        });

        add_button.setBackground(new java.awt.Color(0, 102, 102));
        add_button.setFont(new java.awt.Font("Yu Gothic UI", 1, 14)); // NOI18N
        add_button.setForeground(new java.awt.Color(153, 255, 204));
        add_button.setText("Add");
        add_button.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        add_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                add_buttonActionPerformed(evt);
            }
        });

        delete_table_button.setBackground(new java.awt.Color(0, 102, 102));
        delete_table_button.setFont(new java.awt.Font("Yu Gothic UI", 1, 14)); // NOI18N
        delete_table_button.setForeground(new java.awt.Color(153, 255, 204));
        delete_table_button.setText("Clear Items");
        delete_table_button.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        delete_table_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delete_table_buttonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout button_pannelLayout = new javax.swing.GroupLayout(button_pannel);
        button_pannel.setLayout(button_pannelLayout);
        button_pannelLayout.setHorizontalGroup(
            button_pannelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(button_pannelLayout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(add_button, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addComponent(clear_button)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(delete_table_button)
                .addGap(18, 18, 18)
                .addComponent(exit_button, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        button_pannelLayout.setVerticalGroup(
            button_pannelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(button_pannelLayout.createSequentialGroup()
                .addContainerGap(16, Short.MAX_VALUE)
                .addGroup(button_pannelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(exit_button, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(add_button, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(clear_button, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(delete_table_button, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        thanks_pannel.setBackground(new java.awt.Color(73, 75, 100));
        thanks_pannel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        thanks_underscores.setFont(new java.awt.Font("Verdana", 3, 18)); // NOI18N
        thanks_underscores.setForeground(new java.awt.Color(138, 189, 79));
        thanks_underscores.setText("   _____________");
        thanks_pannel.add(thanks_underscores, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, -1, -1));

        thanks_title.setFont(new java.awt.Font("Verdana", 3, 18)); // NOI18N
        thanks_title.setForeground(new java.awt.Color(138, 189, 79));
        thanks_title.setText("'Thank You !,");
        thanks_pannel.add(thanks_title, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 10, -1, -1));

        appliance_available_search_pannel.setBackground(new java.awt.Color(73, 75, 100));
        appliance_available_search_pannel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Search Available Item", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Verdana", 3, 12), new java.awt.Color(0, 204, 204))); // NOI18N

        appliance_available_search_combobox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select", "TV", "Laptop", "Fan", "AC", "Mobile" }));

        appliance_available_search_button.setBackground(new java.awt.Color(0, 102, 102));
        appliance_available_search_button.setFont(new java.awt.Font("Yu Gothic UI", 1, 14)); // NOI18N
        appliance_available_search_button.setForeground(new java.awt.Color(153, 255, 204));
        appliance_available_search_button.setText("Appliances available in category");
        appliance_available_search_button.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        appliance_available_search_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                appliance_available_search_buttonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout appliance_available_search_pannelLayout = new javax.swing.GroupLayout(appliance_available_search_pannel);
        appliance_available_search_pannel.setLayout(appliance_available_search_pannelLayout);
        appliance_available_search_pannelLayout.setHorizontalGroup(
            appliance_available_search_pannelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(appliance_available_search_pannelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(appliance_available_search_combobox, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(appliance_available_search_button, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        appliance_available_search_pannelLayout.setVerticalGroup(
            appliance_available_search_pannelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(appliance_available_search_pannelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(appliance_available_search_pannelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(appliance_available_search_pannelLayout.createSequentialGroup()
                        .addComponent(appliance_available_search_combobox)
                        .addGap(3, 3, 3))
                    .addComponent(appliance_available_search_button))
                .addContainerGap())
        );

        javax.swing.GroupLayout app_pannelLayout = new javax.swing.GroupLayout(app_pannel);
        app_pannel.setLayout(app_pannelLayout);
        app_pannelLayout.setHorizontalGroup(
            app_pannelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(app_pannelLayout.createSequentialGroup()
                .addGroup(app_pannelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(app_pannelLayout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(form_pannel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(app_pannelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(app_pannelLayout.createSequentialGroup()
                                .addGap(52, 52, 52)
                                .addComponent(table_pannel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(app_pannelLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(appliance_available_search_pannel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(search_pannel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 7, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, app_pannelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(button_pannel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, app_pannelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(app_pannelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, app_pannelLayout.createSequentialGroup()
                        .addComponent(main_title_pannel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(448, 448, 448))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, app_pannelLayout.createSequentialGroup()
                        .addComponent(thanks_pannel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(462, 462, 462))))
        );
        app_pannelLayout.setVerticalGroup(
            app_pannelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(app_pannelLayout.createSequentialGroup()
                .addComponent(main_title_pannel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(app_pannelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(app_pannelLayout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(app_pannelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(search_pannel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(appliance_available_search_pannel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(table_pannel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(form_pannel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(button_pannel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(thanks_pannel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        menubar.setBackground(new java.awt.Color(117, 80, 80));

        file_Menu.setText("File");
        file_Menu.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        open_menu_item.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.CTRL_MASK));
        open_menu_item.setText("Import");
        open_menu_item.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        open_menu_item.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                open_menu_itemActionPerformed(evt);
            }
        });
        file_Menu.add(open_menu_item);

        exit_menu_item.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        exit_menu_item.setText("Exit");
        exit_menu_item.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        exit_menu_item.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exit_menu_itemActionPerformed(evt);
            }
        });
        file_Menu.add(exit_menu_item);

        menubar.add(file_Menu);

        help_menu.setText("Help");
        help_menu.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        help_menu.setMargin(new java.awt.Insets(0, 2, 0, 0));

        about_app_item.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.CTRL_MASK));
        about_app_item.setText("About App");
        about_app_item.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        about_app_item.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                about_app_itemActionPerformed(evt);
            }
        });
        help_menu.add(about_app_item);

        user_manual_item.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.CTRL_MASK));
        user_manual_item.setText("User Manual");
        user_manual_item.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                user_manual_itemActionPerformed(evt);
            }
        });
        help_menu.add(user_manual_item);

        menubar.add(help_menu);

        setJMenuBar(menubar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(app_pannel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(2, 2, 2))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(app_pannel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void aboutApp() {

        JOptionPane.showMessageDialog(rootPane, ""
                + "What It's For ? :\n - This application is about storing the product's records for Inventory Management System."
                + "\n- It keeps record of different types of electronic appliances."
                + "\n- You can keep records as per the categories and quality wise."
                + "\n- You can add products as per warranty time period."
                + "\n- Your products record are kept and viewed safely in table."
                + "\n- You can delete and add new products easily.",
                "What it's For ?",
                JOptionPane.INFORMATION_MESSAGE);
    }

    private void userManual() {

        JOptionPane.showMessageDialog(rootPane, ""
                + "How to use app ? :\n - You can open or import text file in table from file menu import option or CTRL + I.\n"
                + "- You can close the program from file menu close option or CTRL + E.\n"
                + "- You can read about application from help menu about app option or CTRL + H. \n"
                + "- You Can read user manual from help menu user manual option or CTRL + M.\n"
                + "- You can add products by clicking add button after filling the required fields.\n"
                + "- You can clear all the fields by just clicking clear field button.\n"
                + "- You can select a category and search the available appliances in the table.\n"
                + "- You can insert a price and search the item of that price in the table.\n"
                + "- If table is full you can delete items from the table by clicking clear item button.\n"
                + "- You can exit the program by just clicking exit button.",
                "User Guide",
                JOptionPane.INFORMATION_MESSAGE);

    }

    private void clearScreen() {

        id_field.setText("");
        name_field.setText("");
        model_number_field.setText("");
        price_field.setText("");
        search_field.setText("");
        quality_btnGroup.clearSelection();
        category_combobox.setSelectedIndex(0);
        warranty_combobox.setSelectedIndex(0);
    }

    private void exitProgram() {

        int confirmed = JOptionPane.showConfirmDialog(null,
                "Are you sure you want to exit ?", "Exit Program",
                JOptionPane.YES_NO_OPTION);

        if (confirmed == JOptionPane.YES_OPTION) {
            System.exit(0);
        }
    }

    private void addItems() {

        String id_input = id_field.getText().trim();
        String name_input = capitalize(name_field.getText().trim());
        String category_input = (String) category_combobox.getSelectedItem();
        String model_number_input = model_number_field.getText().trim();
        String price_input = price_field.getText().trim();
        String warranty_input = (String) warranty_combobox.getSelectedItem();
        String quality_input = "";

        switch (qualityChoice) {
            case 1:
                quality_input = "Good";
                break;
            case 2:
                quality_input = "Better";
                break;
            case 3:
                quality_input = "Best";
                break;
            default:
                System.out.println("ERROR!");
                break;
        }

        if (!id_input.isEmpty() && !name_input.isEmpty() && category_combobox.getSelectedIndex() != 0
                && !model_number_input.isEmpty() && !price_input.isEmpty()
                && warranty_combobox.getSelectedIndex() != 0 && !quality_input.isEmpty()) {

            for (AppliancesData s : list) {
                if (id_input.equals(s.getId())) {
                    JOptionPane.showMessageDialog(rootPane, "This ID is registered already. "
                            + "\n Please enter new ID.", "ID repeated", JOptionPane.ERROR_MESSAGE);
                    return;
                } else if (model_number_input.equals(s.getModuleNumber())) {
                    JOptionPane.showMessageDialog(rootPane, "Model number of the product can't be repeated.",
                            "Module Number repeated", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }

            int rowCount = inventory_table.getRowCount(); //return thr row count of the table
            int nextRow = 0; //to denote an empty row's index
            boolean emptyRowFlag = false; //indicates whether an empty row has been found or not
            String s;

            do {
                s = (String) inventory_table.getValueAt(nextRow, 0);
                if (s != null && s.length() != 0) {
                    nextRow++;
                } else {
                    emptyRowFlag = true;
                }
            } while (nextRow < rowCount && !emptyRowFlag);

            if (emptyRowFlag) {
                int colCount = inventory_table.getColumnCount(); //returns number of columns
                String value[] = {id_input, name_input, category_input, quality_input, model_number_input,
                    price_input, warranty_input};
                //changing type of price from String to int

                //TODO: Fix this
                for (int i = nextRow; i < nextRow + 1; i++) {
                    priceArr[i] = Integer.parseInt(value[5]);
                    categ[i] = value[2];
                }
                sort(priceArr);

                AppliancesData obj = new AppliancesData(id_input, name_input, category_input,
                        quality_input, model_number_input, price_input, warranty_input);
                list.add(obj);

                for (int i = 0; i < colCount; i++) {
                    inventory_table.setValueAt(value[i], nextRow, i);
                }

                JOptionPane.showMessageDialog(rootPane, "Product added successfully.", "Success",
                        JOptionPane.INFORMATION_MESSAGE);
                clearScreen();
            } else {
                JOptionPane.showMessageDialog(rootPane, "Empty row not available.", "No Rows",
                        JOptionPane.ERROR_MESSAGE);
            }
        } else if (id_input.isEmpty() || name_input.isEmpty() || model_number_input.isEmpty() || price_input.isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "Please fill all the field.", "Empty Field",
                    JOptionPane.ERROR_MESSAGE);
        } else if (category_combobox.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(rootPane, "Please select any one cateogory.", "Empty Category", JOptionPane.ERROR_MESSAGE);
        } else if (quality_input.isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "Please select any one quality.", "Empty quality", JOptionPane.ERROR_MESSAGE);
        } else if (warranty_combobox.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(rootPane, "Please select any one warranty scheme.", "Empty Warranty",
                    JOptionPane.ERROR_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(rootPane, "Please, fill all the field and try again.", "Empty Field",
                    JOptionPane.ERROR_MESSAGE);
        }
    }

    private void sort(int[] a) {

        for (int i = 0; i < a.length - 1; i++) //to place the element in it's correct spot
        {
            int minPos = i;
            for (int j = i + 1; j < a.length; j++) { //to go through the unsorted array inorder for us to find the smallest element
                if (a[j] < a[minPos]) {
                    minPos = j;
                }
            }
            //swapping elements
            int temp = a[i];
            a[i] = a[minPos];
            a[minPos] = temp;
        }
    }

    private void openMenuItem() {

        int returnVal = file_chooser.showOpenDialog(this);
        int colCount = inventory_table.getColumnCount();
        if (returnVal == file_chooser.APPROVE_OPTION) {
            File file = file_chooser.getSelectedFile();
            String filename = file.getAbsolutePath();
            try {
                FileReader fr = new FileReader(filename);
                BufferedReader br = new BufferedReader(fr);
                Object[] lines = br.lines().toArray();

                for (int i = 0; i < lines.length; i++) {
                    String[] row = lines[i].toString().split(",");
                    AppliancesData obj = new AppliancesData(row);
                    list.add(obj);
                    categ[i] = row[2];
                    priceArr[i] = Integer.parseInt(row[5]);
                    for (int j = 0; j < colCount; j++) {
                        inventory_table.setValueAt(row[j], i, j);
                    }
                }
                sort(priceArr);
                JOptionPane.showMessageDialog(rootPane, "File opened successfully.", "Open File", JOptionPane.INFORMATION_MESSAGE);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(Appliances_Info.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ArrayIndexOutOfBoundsException ae) {
                JOptionPane.showMessageDialog(rootPane, "Please open appropriate txt file.", "Open File Error",
                        JOptionPane.ERROR_MESSAGE);
            }

        }
    }

    private void applianceAvailable() {

        String selectedItem = appliance_available_search_combobox.getSelectedItem().toString();

        int remainingItems = 0;
        if (selectedItem.equals("Select")) {
            JOptionPane.showMessageDialog(rootPane, "Please select a valid category.", "Empty Category", JOptionPane.ERROR_MESSAGE);
        } else {
            for (String c : categ) {
                if (selectedItem.equalsIgnoreCase(c)) {
                    remainingItems++;
                }
            }
            for (AppliancesData s : list) {
                if (selectedItem.equals(s.getCategory())) {
                    labelNames.add(s.getName());
                }
            }
            if (remainingItems == 0) {
                JOptionPane.showMessageDialog(rootPane, "Please insert the appropriate values in table first.", "Empty Table",
                        JOptionPane.ERROR_MESSAGE);
                //return;
            } else if (remainingItems > 0) {
                JOptionPane.showMessageDialog(rootPane, "There are " + remainingItems + " " + selectedItem
                        + "s remaining: \n" + labelNames, "Items List", JOptionPane.INFORMATION_MESSAGE);
            }
            appliance_available_search_combobox.setSelectedIndex(0);
        }
        labelNames.clear();
    }

    private void searchByPrice() {

        String priceTxt = search_field.getText();

        if (!priceTxt.equals("")) {
            int p = Integer.parseInt(priceTxt);
            int searchPrice = binarySearch(priceArr, 0, priceArr.length - 1, p);

            if (searchPrice == -1) {
                JOptionPane.showMessageDialog(rootPane, "Price not found.", "No Price", JOptionPane.WARNING_MESSAGE);
            } else {
                for (AppliancesData s : list) {
                    if (priceTxt.equals(s.getPrice())) {
                        JOptionPane.showMessageDialog(rootPane, "The details of the given price is given below:" + "\n" + "ID: "
                                + s.getId() + "\n" + "Name: " + s.getName() + "\n" + "Category: " + s.getCategory() + "\n"
                                + "Quality: " + s.getQuality()
                                + "\n" + "Module Number: " + s.getModuleNumber() + "\n" + "Warranty: " + s.getWarranty(),
                                "Item Details", JOptionPane.INFORMATION_MESSAGE);
                        break;
                    }
                }
            }
            search_field.setText(null);

        } else {
            JOptionPane.showMessageDialog(rootPane, "Please enter price first.", "No Price", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void deleteTableItems() {

        int confirmed = JOptionPane.showConfirmDialog(null,
                "Are you sure you want to clear items From the table ?", "Clear Items",
                JOptionPane.YES_NO_OPTION);

        if (confirmed == JOptionPane.YES_OPTION) {
            int rowCount = inventory_table.getRowCount() - 1;
            int column = inventory_table.getColumnCount() - 1;
            for (int i = 0; i <= rowCount; i++) {
                String s = (String) inventory_table.getValueAt(i, 0);

                if (s != null && s.length() != 0) {
                    for (int j = 0; j <= rowCount; j++) {
                        for (int k = 0; k <= column; k++) {
                            inventory_table.setValueAt(null, j, k);
                        }
                    }

                    list.clear();
                    Arrays.fill(categ, null);
                    Arrays.fill(priceArr, 0);
                    JOptionPane.showMessageDialog(rootPane, "Items deleted successfully.", "Delete Item",
                            JOptionPane.INFORMATION_MESSAGE);
                    break;

                } else {
                    JOptionPane.showMessageDialog(rootPane, "No items available.", "Empty Row", JOptionPane.ERROR_MESSAGE);
                    break;
                }
            }
        }
    }

    private int binarySearch(int[] arr, int start, int end, int price) {

        if (end >= start) {
            int mid = (end + start) / 2;
            if (arr[mid] == price) {
                return mid;
            } else if (arr[mid] > price) {
                return binarySearch(arr, start, mid - 1, price);
            } else {
                return binarySearch(arr, mid + 1, end, price);
            }
        } else {
            return -1;
        }

    }

    private void about_app_itemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_about_app_itemActionPerformed
        // TODO add your handling code here:
        aboutApp();
    }//GEN-LAST:event_about_app_itemActionPerformed

    private void clear_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clear_buttonActionPerformed
        // TODO add your handling code here:
        clearScreen();
    }//GEN-LAST:event_clear_buttonActionPerformed

    private void exit_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exit_buttonActionPerformed
        // TODO add your handling code here:
        exitProgram();
    }//GEN-LAST:event_exit_buttonActionPerformed

    private void exit_menu_itemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exit_menu_itemActionPerformed
        // TODO add your handling code here:
        exitProgram();
    }//GEN-LAST:event_exit_menu_itemActionPerformed

    private void add_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_add_buttonActionPerformed
        // TODO add your handling code here:
        addItems();
    }//GEN-LAST:event_add_buttonActionPerformed

    private void id_fieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_id_fieldKeyTyped
        // TODO add your handling code here:
        char key = evt.getKeyChar();
        if (!((key >= '0') && (key <= '9'))) {
            evt.consume();
        }
    }//GEN-LAST:event_id_fieldKeyTyped

    private void price_fieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_price_fieldKeyTyped
        // TODO add your handling code here:
        char key = evt.getKeyChar();
        if (!((key >= '0') && (key <= '9'))) {
            evt.consume();
        }
    }//GEN-LAST:event_price_fieldKeyTyped

    private void search_fieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_search_fieldKeyTyped
        // TODO add your handling code here:
        char key = evt.getKeyChar();
        if (!((key >= '0') && (key <= '9'))) {
            evt.consume();
        }
    }//GEN-LAST:event_search_fieldKeyTyped

    private void name_fieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_name_fieldKeyTyped

    }//GEN-LAST:event_name_fieldKeyTyped

    private void open_menu_itemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_open_menu_itemActionPerformed
        // TODO add your handling code here:
        openMenuItem();
    }//GEN-LAST:event_open_menu_itemActionPerformed

    private void appliance_available_search_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_appliance_available_search_buttonActionPerformed
        // TODO add your handling code here:
        applianceAvailable();
    }//GEN-LAST:event_appliance_available_search_buttonActionPerformed

    private void goodRBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goodRBtnActionPerformed
        // TODO add your handling code here:
        qualityChoice = 1;
    }//GEN-LAST:event_goodRBtnActionPerformed

    private void betterRBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_betterRBtnActionPerformed
        // TODO add your handling code here:
        qualityChoice = 2;
    }//GEN-LAST:event_betterRBtnActionPerformed

    private void bestRBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bestRBtnActionPerformed
        // TODO add your handling code here:
        qualityChoice = 3;
    }//GEN-LAST:event_bestRBtnActionPerformed

    private void search_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_search_buttonActionPerformed
        // TODO add your handling code here:
        searchByPrice();
    }//GEN-LAST:event_search_buttonActionPerformed

    private void delete_table_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delete_table_buttonActionPerformed
        // TODO add your handling code here:
        deleteTableItems();
    }//GEN-LAST:event_delete_table_buttonActionPerformed

    private void user_manual_itemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_user_manual_itemActionPerformed
        // TODO add your handling code here:
        userManual();
    }//GEN-LAST:event_user_manual_itemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Appliances_Info.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Appliances_Info.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Appliances_Info.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Appliances_Info.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Appliances_Info().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem about_app_item;
    private javax.swing.JButton add_button;
    private javax.swing.JPanel app_pannel;
    private javax.swing.JButton appliance_available_search_button;
    private javax.swing.JComboBox<String> appliance_available_search_combobox;
    private javax.swing.JPanel appliance_available_search_pannel;
    private javax.swing.JRadioButton bestRBtn;
    private javax.swing.JRadioButton betterRBtn;
    private javax.swing.JPanel button_pannel;
    private javax.swing.JComboBox<String> category_combobox;
    private javax.swing.JLabel category_label;
    private javax.swing.JButton clear_button;
    private javax.swing.JButton delete_table_button;
    private javax.swing.JButton exit_button;
    private javax.swing.JMenuItem exit_menu_item;
    private javax.swing.JMenu file_Menu;
    private javax.swing.JFileChooser file_chooser;
    private javax.swing.JPanel form_pannel;
    private javax.swing.JRadioButton goodRBtn;
    private javax.swing.JMenu help_menu;
    private javax.swing.JTextField id_field;
    private javax.swing.JLabel id_label;
    private javax.swing.JTable inventory_table;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel main_title;
    private javax.swing.JPanel main_title_pannel;
    private javax.swing.JLabel main_underscores;
    private javax.swing.JMenuBar menubar;
    private javax.swing.JTextField model_number_field;
    private javax.swing.JLabel model_number_label;
    private javax.swing.JTextField name_field;
    private javax.swing.JLabel name_label;
    private javax.swing.JMenuItem open_menu_item;
    private javax.swing.JTextField price_field;
    private javax.swing.JLabel price_label;
    private javax.swing.ButtonGroup quality_btnGroup;
    private javax.swing.JLabel quality_label;
    private javax.swing.JButton search_button;
    private javax.swing.JTextField search_field;
    private javax.swing.JPanel search_pannel;
    private javax.swing.JPanel table_pannel;
    private javax.swing.JPanel thanks_pannel;
    private javax.swing.JLabel thanks_title;
    private javax.swing.JLabel thanks_underscores;
    private javax.swing.JMenuItem user_manual_item;
    private javax.swing.JComboBox<String> warranty_combobox;
    private javax.swing.JLabel warranty_label;
    // End of variables declaration//GEN-END:variables
}
